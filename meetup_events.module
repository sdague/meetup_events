<?php

/**
 * @file
 *
 * This module allows admins to set recurrent announcements for nodes to send
 * to specified email addresses.
 */


/**
 * Implementation of hook_perm()
 */
function meetup_events_perm() {
  return array('administer meetup events');
}

/**
 * Implementaiton of hook_menu()
 */
function meetup_events_menu() {
  $items['admin/settings/meetup_events'] = array(
    'title' => 'Meetup Events',
    'description' => 'Setup Meetup Event synchronization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meetup_events_admin_settings'),
    'access arguments' => array('administer meetup events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'meetup_events.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi()
 */
function meetup_events_nodeapi(&$node, $op, $a3, $a4) {
  // dprint_r("Op: " . $op);
  // drupal_set_message(print_r($node, TRUE));
  if (($op == "insert") || ($op == "update")) {
    if (meetup_events_is_type_syncable($node->type)) {
      meetup_events_sync_event($node);
    }
  }
}

function meetup_events_is_type_syncable($type) {
  $values = variable_get("meetup_events", array());

  if ($values[$type . "_enable"][$type]) {
    return TRUE;
  } else {
    return FALSE;
  }
}


function meetup_events_sync_event(&$node) {
  $meetupid = meetup_events_get_meetupid($node->nid);
  if ($meetupid) {
    meetup_events_update_event($meetupid, $node);
  } else {
    meetup_events_create_event($node);
  }

}

function meetup_events_save_meetupid($nid, $id) {
  $obj = (object)array(
    "nid" => $nid,
    "id" => $id,
    "last_updated" => time(),
  );
  drupal_write_record('meetup_events', $obj);
}

function meetup_events_get_meetupid($nid) {
  $event = db_fetch_object(db_query("SELECT id from {meetup_events} where nid=%d", $nid));
  if (!$event) {
    return NULL;
  } else {
    return $event->id;
  }
}

function meetup_events_node_data($node) {
  // This is a hack, but it works. There should be a way to do timezone
  // gymnastics on the DateTime field, but I'm not sure what that is yet.
  $tz = date_default_timezone_get();
  date_default_timezone_set('UTC');

  $date = new DateTime(theme('meetup_events_date', $node));


  $data = array(
    "key" => variable_get('meetup_events_meetup_key', 0),
    "group_id" => variable_get('meetup_events_meetup_group', 0),
    "name" => $node->title,
    "description" => theme('meetup_events_body', $node),
    "time" => $date->getTimestamp() * 1000,
  );

  $venue = theme('meetup_events_venueid', $node);
  if ($venue) {
    # $venue comes back as a venue_id plus an optional lat, lon
    $loc = explode(",", $venue);
    $data["venue_id"] = $loc[0];
    if ($loc[1] && $loc[2]) {
      $data["lat"] = $loc[1];
      $data["lon"] = $loc[2];
    }
  }

  $request_data = http_build_query($data, '', '&');

  // Make sure to reset the timezone, we really don't want this actually global
  date_default_timezone_set($tz);

  return $request_data;
}

function meetup_events_delete_event($id) {
  $request_url = "https://api.meetup.com/2/event/$id";
  $request_headers = array(
    'Content-Type' => 'application/x-www-form-urlencoded',
    'Accept-Charset' => 'utf-8');
  $request_method = 'DELETE';
  $data = array();

  $res = drupal_http_request($request_url, $request_headers, $request_method, $data);
  # drupal_set_message("Update '" . $res->data . "'");
  if ($res->data) {
    drupal_set_message("Deleted event from meetup");
  } else {
    drupal_set_message("Failed to delete from Meetup, you should try again later");
  }
}

function meetup_events_update_event($id, $node) {
  $request_url = "https://api.meetup.com/2/event/$id";
  $request_headers = array(
    'Content-Type' => 'application/x-www-form-urlencoded',
    'Accept-Charset' => 'utf-8');
  $request_method = 'POST';

  $data = meetup_events_node_data($node);

  $res = drupal_http_request($request_url, $request_headers, $request_method, $data);
  # drupal_set_message("Update '" . $res->data . "'");
  $data = json_decode($res->data);
  if ($data->id) {
    drupal_set_message("Updated on <a href='" . $data->event_url .  "'>Meetup</a>");
  } else {
    drupal_set_message("Failed to update Meetup, you should try again later");
  }
}

function meetup_events_create_event($node) {
  $request_url = "https://api.meetup.com/2/event";
  $request_headers = array(
    'Content-Type' => 'application/x-www-form-urlencoded',
    'Accept-Charset' => 'utf-8');
  $request_method = 'POST';

  $data = meetup_events_node_data($node);

  $res = drupal_http_request($request_url, $request_headers, $request_method, $data);
#  drupal_set_message("Create '" . $res->data . "'");
  $data = json_decode($res->data);
  if ($data->id) {
    meetup_events_save_meetupid($node->nid, $data->id);
    drupal_set_message("Saved to <a href='" . $data->event_url .  "'>Meetup</a>");
  } else {
    drupal_set_message("Failed to save to Meetup, you should try again later");
  }

}

/**
 * You are going to need to modify this theme function for your environment
 */
function theme_meetup_events_venueid($node) {
  if (! $node->field_location) {
    return;
  }

  $loc = node_load($node->field_location[0]["nid"]);

  if (!$loc->field_meetupvenue) {
    return;
  }

  $venue = $loc->field_meetupvenue[0]["value"];

  if ($loc->field_meetuplat && $loc->field_meetuplon) {
    $venue .= "," . $loc->field_meetuplat[0]["value"] . "," . $loc->field_meetuplon[0]["value"];
  }

  return $venue;
}

function theme_meetup_events_body($node) {
  $boilerplate = node_load($node->field_boilerplate[0]["nid"]);
  $result = $node->body . $boilerplate->body;
  return $result;
}

function theme_meetup_events_date($node) {
  return $node->field_date[0]["value"];
}

function meetup_events_theme() {
  $path = drupal_get_path('module', 'meetup_events_theme');
  $base = array(
    'path' => "$path/theme"
  );

  // TODO: get forms in here as well, though I was having an issue getting
  // them to take parameters as well as the form parameters
  $themes = array(
    'meetup_events_venueid' => array(
      'arguments' => array('node' => NULL),
    ),
    'meetup_events_body' => array(
      'arguments' => array('node' => NULL)
    ),
    'meetup_events_date' => array(
      'arguments' => array('node' => NULL)
    )
  );
  return $themes;
}